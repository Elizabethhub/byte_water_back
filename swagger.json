{
  "openapi": "3.0.1",
  "info": {
    "version": "1.0.0",
    "title": "Swagger Water Tracker by Byte group",
    "description": "Showing off swagger-ui-express",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json", "multipart/form-data"],
  "servers": [
    { "url": "http://localhost:4000/api" },
    { "url": "byte-water-back.onrender.com/api" }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "User",
      "description": "User info endpoints"
    },
    {
      "name": "Water",
      "description": "Water endpoints"
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "requestBody": {
          "description": "Registration request object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful registration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "409": {
            "description": "Provided email already exists",
            "content": {}
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User sign-in",
        "requestBody": {
          "description": "Sign-in request object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigninRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful sign-in",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigninResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (email or password invalid)"
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User sign-out",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful sign-out"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/users/forgot-password": {
      "post": {
        "tags": ["Auth"],
        "summary": "Forgot password",
        "requestBody": {
          "description": "Forgot password request object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Forgot password email sent"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/update-password/{tempCode}": {
      "post": {
        "tags": ["Auth"],
        "summary": "Update password",
        "parameters": [
          {
            "name": "tempCode",
            "in": "path",
            "description": "Temporary code for password update",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "description": "Update password request object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password updated successfully"
          },
          "401": {
            "description": "Unauthorized (old password is the same as the new one)"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": ["User"],
        "summary": "Get current user information",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/users/update-user": {
      "patch": {
        "tags": ["User"],
        "summary": "Update user information",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Update user information request object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User information updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/users/avatars": {
      "patch": {
        "tags": ["User"],
        "summary": "Update user avatar",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Update user avatar request object",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "avatarURL": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Avatar updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "avatarURL": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/users": {
      "patch": {
        "tags": ["User"],
        "summary": "Update user daily norma",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Update user daily norma request object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#components/schemas/UpdateDailyNormaRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDailyNormaRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "User's username"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "avatarURL": {
            "type": "string",
            "description": "URL of user's avatar"
          },
          "dailyNorma": {
            "type": "number",
            "description": "User's daily norma"
          }
        }
      },
      "SigninRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password"
          }
        }
      },
      "SigninResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT token for authentication"
          },
          "user": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              },
              "username": {
                "type": "string",
                "description": "User's username"
              },
              "avatarURL": {
                "type": "string",
                "description": "URL of user's avatar"
              },
              "dailyNorma": {
                "type": "number",
                "description": "User's daily norma"
              }
            }
          }
        }
      },
      "ForgotPasswordRequest": {
        "type": "object",
        "required": ["email"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          }
        }
      },
      "UpdatePasswordRequest": {
        "type": "object",
        "required": ["newPassword"],
        "properties": {
          "newPassword": {
            "type": "string",
            "description": "New password for the user"
          }
        }
      },
      "CurrentUserResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "avatarURL": {
            "type": "string",
            "description": "URL of user's avatar"
          },
          "username": {
            "type": "string",
            "description": "User's username"
          },
          "gender": {
            "type": "string",
            "description": "User's gender"
          },
          "dailyNorma": {
            "type": "number",
            "description": "User's daily norma"
          }
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "username": {
            "type": "string",
            "description": "User's username"
          },
          "gender": {
            "type": "string",
            "description": "User's gender"
          }
        }
      },
      "UpdateUserResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "avatarURL": {
            "type": "string",
            "description": "URL of user's avatar"
          },
          "username": {
            "type": "string",
            "description": "User's username"
          },
          "gender": {
            "type": "string",
            "description": "User's gender"
          },
          "dailyNorma": {
            "type": "number",
            "description": "User's daily norma"
          }
        }
      },
      "UpdateDailyNormaRequest": {
        "type": "object",
        "properties": {
          "dailyNorma": {
            "type": "number",
            "description": "User's updated daily norma"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
